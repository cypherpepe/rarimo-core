// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: identity/params.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the parameters for the module.
type Params struct {
	// Linear congruential generator params
	// https://en.wikipedia.org/wiki/Linear_congruential_generator
	LcgA     uint64 `protobuf:"varint,1,opt,name=lcgA,proto3" json:"lcgA,omitempty"`
	LcgB     uint64 `protobuf:"varint,2,opt,name=lcgB,proto3" json:"lcgB,omitempty"`
	LcgMod   uint64 `protobuf:"varint,3,opt,name=lcgMod,proto3" json:"lcgMod,omitempty"`
	LcgValue uint64 `protobuf:"varint,4,opt,name=lcgValue,proto3" json:"lcgValue,omitempty"`
	// Address of identity state smart contract in rarimo chain
	IdentityContractAddress string   `protobuf:"bytes,5,opt,name=identityContractAddress,proto3" json:"identityContractAddress,omitempty"`
	ChainName               string   `protobuf:"bytes,6,opt,name=chainName,proto3" json:"chainName,omitempty"`
	GISTHash                string   `protobuf:"bytes,7,opt,name=GISTHash,proto3" json:"GISTHash,omitempty"`
	GISTUpdatedTimestamp    uint64   `protobuf:"varint,8,opt,name=GISTUpdatedTimestamp,proto3" json:"GISTUpdatedTimestamp,omitempty"`
	TreapRootKey            string   `protobuf:"bytes,9,opt,name=treapRootKey,proto3" json:"treapRootKey,omitempty"`
	StatesWaitingForSign    []string `protobuf:"bytes,10,rep,name=statesWaitingForSign,proto3" json:"statesWaitingForSign,omitempty"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_1daff2e153394ac6, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetLcgA() uint64 {
	if m != nil {
		return m.LcgA
	}
	return 0
}

func (m *Params) GetLcgB() uint64 {
	if m != nil {
		return m.LcgB
	}
	return 0
}

func (m *Params) GetLcgMod() uint64 {
	if m != nil {
		return m.LcgMod
	}
	return 0
}

func (m *Params) GetLcgValue() uint64 {
	if m != nil {
		return m.LcgValue
	}
	return 0
}

func (m *Params) GetIdentityContractAddress() string {
	if m != nil {
		return m.IdentityContractAddress
	}
	return ""
}

func (m *Params) GetChainName() string {
	if m != nil {
		return m.ChainName
	}
	return ""
}

func (m *Params) GetGISTHash() string {
	if m != nil {
		return m.GISTHash
	}
	return ""
}

func (m *Params) GetGISTUpdatedTimestamp() uint64 {
	if m != nil {
		return m.GISTUpdatedTimestamp
	}
	return 0
}

func (m *Params) GetTreapRootKey() string {
	if m != nil {
		return m.TreapRootKey
	}
	return ""
}

func (m *Params) GetStatesWaitingForSign() []string {
	if m != nil {
		return m.StatesWaitingForSign
	}
	return nil
}

func init() {
	proto.RegisterType((*Params)(nil), "rarimo.rarimocore.identity.Params")
}

func init() { proto.RegisterFile("identity/params.proto", fileDescriptor_1daff2e153394ac6) }

var fileDescriptor_1daff2e153394ac6 = []byte{
	// 335 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x51, 0x4f, 0x4b, 0xc3, 0x30,
	0x14, 0x5f, 0xb7, 0x59, 0xd7, 0xe0, 0x29, 0x4c, 0x0d, 0x43, 0xca, 0xd8, 0x69, 0x17, 0x5b, 0xd0,
	0x8b, 0xd7, 0x4d, 0xd0, 0x89, 0x28, 0xd2, 0x4d, 0x05, 0x6f, 0x6f, 0x6d, 0xc8, 0x02, 0x6d, 0x53,
	0x92, 0x27, 0xb8, 0x6f, 0xe1, 0xc7, 0xf2, 0xb8, 0xa3, 0x47, 0xd9, 0xfc, 0x20, 0xd2, 0x6c, 0xab,
	0x08, 0xf3, 0xf4, 0xde, 0xef, 0x4f, 0x7e, 0x79, 0xf0, 0x23, 0x87, 0x32, 0xe1, 0x39, 0x4a, 0x9c,
	0x87, 0x05, 0x68, 0xc8, 0x4c, 0x50, 0x68, 0x85, 0x8a, 0x76, 0x34, 0x68, 0x99, 0xa9, 0x60, 0x3d,
	0x62, 0xa5, 0x79, 0xb0, 0x35, 0x76, 0xda, 0x42, 0x09, 0x65, 0x6d, 0x61, 0xb9, 0xad, 0x5f, 0xf4,
	0xbe, 0xeb, 0xc4, 0x7d, 0xb0, 0x11, 0x94, 0x92, 0x66, 0x1a, 0x8b, 0x01, 0x73, 0xba, 0x4e, 0xbf,
	0x19, 0xd9, 0x7d, 0xc3, 0x0d, 0x59, 0xbd, 0xe2, 0x86, 0xf4, 0x88, 0xb8, 0x69, 0x2c, 0xee, 0x54,
	0xc2, 0x1a, 0x96, 0xdd, 0x20, 0xda, 0x21, 0xad, 0x34, 0x16, 0x4f, 0x90, 0xbe, 0x72, 0xd6, 0xb4,
	0x4a, 0x85, 0xe9, 0x05, 0x39, 0xde, 0x1e, 0x72, 0xa9, 0x72, 0xd4, 0x10, 0xe3, 0x20, 0x49, 0x34,
	0x37, 0x86, 0xed, 0x75, 0x9d, 0xbe, 0x17, 0xfd, 0x27, 0xd3, 0x13, 0xe2, 0xc5, 0x33, 0x90, 0xf9,
	0x3d, 0x64, 0x9c, 0xb9, 0xd6, 0xfb, 0x4b, 0x94, 0x7f, 0x5e, 0xdf, 0x8c, 0x27, 0x23, 0x30, 0x33,
	0xb6, 0x6f, 0xc5, 0x0a, 0xd3, 0x33, 0xd2, 0x2e, 0xf7, 0xc7, 0x22, 0x01, 0xe4, 0xc9, 0x44, 0x66,
	0xdc, 0x20, 0x64, 0x05, 0x6b, 0xd9, 0xdb, 0x76, 0x6a, 0xb4, 0x47, 0x0e, 0x50, 0x73, 0x28, 0x22,
	0xa5, 0xf0, 0x96, 0xcf, 0x99, 0x67, 0x33, 0xff, 0x70, 0x65, 0xae, 0x41, 0x40, 0x6e, 0x9e, 0x41,
	0xa2, 0xcc, 0xc5, 0x95, 0xd2, 0x63, 0x29, 0x72, 0x46, 0xba, 0x8d, 0xbe, 0x17, 0xed, 0xd4, 0x86,
	0xa3, 0x8f, 0xa5, 0xef, 0x2c, 0x96, 0xbe, 0xf3, 0xb5, 0xf4, 0x9d, 0xf7, 0x95, 0x5f, 0x5b, 0xac,
	0xfc, 0xda, 0xe7, 0xca, 0xaf, 0xbd, 0x04, 0x42, 0x62, 0x0a, 0xd3, 0x20, 0x56, 0x59, 0xb8, 0xae,
	0x6d, 0x33, 0x4e, 0xcb, 0xfa, 0xc2, 0xb7, 0xb0, 0x6a, 0x1a, 0xe7, 0x05, 0x37, 0x53, 0xd7, 0xf6,
	0x76, 0xfe, 0x13, 0x00, 0x00, 0xff, 0xff, 0x7e, 0x64, 0xcf, 0x33, 0x02, 0x02, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StatesWaitingForSign) > 0 {
		for iNdEx := len(m.StatesWaitingForSign) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.StatesWaitingForSign[iNdEx])
			copy(dAtA[i:], m.StatesWaitingForSign[iNdEx])
			i = encodeVarintParams(dAtA, i, uint64(len(m.StatesWaitingForSign[iNdEx])))
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.TreapRootKey) > 0 {
		i -= len(m.TreapRootKey)
		copy(dAtA[i:], m.TreapRootKey)
		i = encodeVarintParams(dAtA, i, uint64(len(m.TreapRootKey)))
		i--
		dAtA[i] = 0x4a
	}
	if m.GISTUpdatedTimestamp != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.GISTUpdatedTimestamp))
		i--
		dAtA[i] = 0x40
	}
	if len(m.GISTHash) > 0 {
		i -= len(m.GISTHash)
		copy(dAtA[i:], m.GISTHash)
		i = encodeVarintParams(dAtA, i, uint64(len(m.GISTHash)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ChainName) > 0 {
		i -= len(m.ChainName)
		copy(dAtA[i:], m.ChainName)
		i = encodeVarintParams(dAtA, i, uint64(len(m.ChainName)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.IdentityContractAddress) > 0 {
		i -= len(m.IdentityContractAddress)
		copy(dAtA[i:], m.IdentityContractAddress)
		i = encodeVarintParams(dAtA, i, uint64(len(m.IdentityContractAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if m.LcgValue != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.LcgValue))
		i--
		dAtA[i] = 0x20
	}
	if m.LcgMod != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.LcgMod))
		i--
		dAtA[i] = 0x18
	}
	if m.LcgB != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.LcgB))
		i--
		dAtA[i] = 0x10
	}
	if m.LcgA != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.LcgA))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LcgA != 0 {
		n += 1 + sovParams(uint64(m.LcgA))
	}
	if m.LcgB != 0 {
		n += 1 + sovParams(uint64(m.LcgB))
	}
	if m.LcgMod != 0 {
		n += 1 + sovParams(uint64(m.LcgMod))
	}
	if m.LcgValue != 0 {
		n += 1 + sovParams(uint64(m.LcgValue))
	}
	l = len(m.IdentityContractAddress)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = len(m.ChainName)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = len(m.GISTHash)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	if m.GISTUpdatedTimestamp != 0 {
		n += 1 + sovParams(uint64(m.GISTUpdatedTimestamp))
	}
	l = len(m.TreapRootKey)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	if len(m.StatesWaitingForSign) > 0 {
		for _, s := range m.StatesWaitingForSign {
			l = len(s)
			n += 1 + l + sovParams(uint64(l))
		}
	}
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LcgA", wireType)
			}
			m.LcgA = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LcgA |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LcgB", wireType)
			}
			m.LcgB = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LcgB |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LcgMod", wireType)
			}
			m.LcgMod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LcgMod |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LcgValue", wireType)
			}
			m.LcgValue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LcgValue |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentityContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdentityContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GISTHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GISTHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GISTUpdatedTimestamp", wireType)
			}
			m.GISTUpdatedTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GISTUpdatedTimestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TreapRootKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TreapRootKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatesWaitingForSign", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StatesWaitingForSign = append(m.StatesWaitingForSign, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)
