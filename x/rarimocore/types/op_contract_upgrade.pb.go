// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: rarimocore/op_contract_upgrade.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/codec/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ContractUpgrade struct {
	// Chain name according to stored in tokenmanager params
	Chain string `protobuf:"bytes,1,opt,name=chain,proto3" json:"chain,omitempty"`
	// New contract address: used on EVM
	NewImplementationContract string `protobuf:"bytes,2,opt,name=newImplementationContract,proto3" json:"newImplementationContract,omitempty"`
	// byte code hash: used on Solana and Near
	Hash string `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
	// Solana buffer account
	BufferAccount string `protobuf:"bytes,4,opt,name=bufferAccount,proto3" json:"bufferAccount,omitempty"`
	// hex nonce
	Nonce string `protobuf:"bytes,5,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *ContractUpgrade) Reset()         { *m = ContractUpgrade{} }
func (m *ContractUpgrade) String() string { return proto.CompactTextString(m) }
func (*ContractUpgrade) ProtoMessage()    {}
func (*ContractUpgrade) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9fcb7f3cf0bf891, []int{0}
}
func (m *ContractUpgrade) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContractUpgrade) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContractUpgrade.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContractUpgrade) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContractUpgrade.Merge(m, src)
}
func (m *ContractUpgrade) XXX_Size() int {
	return m.Size()
}
func (m *ContractUpgrade) XXX_DiscardUnknown() {
	xxx_messageInfo_ContractUpgrade.DiscardUnknown(m)
}

var xxx_messageInfo_ContractUpgrade proto.InternalMessageInfo

func (m *ContractUpgrade) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

func (m *ContractUpgrade) GetNewImplementationContract() string {
	if m != nil {
		return m.NewImplementationContract
	}
	return ""
}

func (m *ContractUpgrade) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *ContractUpgrade) GetBufferAccount() string {
	if m != nil {
		return m.BufferAccount
	}
	return ""
}

func (m *ContractUpgrade) GetNonce() string {
	if m != nil {
		return m.Nonce
	}
	return ""
}

func init() {
	proto.RegisterType((*ContractUpgrade)(nil), "rarimo.rarimocore.rarimocore.ContractUpgrade")
}

func init() {
	proto.RegisterFile("rarimocore/op_contract_upgrade.proto", fileDescriptor_c9fcb7f3cf0bf891)
}

var fileDescriptor_c9fcb7f3cf0bf891 = []byte{
	// 274 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x90, 0xb1, 0x4a, 0x34, 0x31,
	0x14, 0x85, 0x27, 0xff, 0xbf, 0x2b, 0x18, 0x10, 0x21, 0x6c, 0x91, 0x5d, 0x24, 0x88, 0x6c, 0x61,
	0xe3, 0x44, 0xb0, 0xb5, 0x51, 0x2b, 0x2d, 0x05, 0x1b, 0x9b, 0x25, 0x13, 0x33, 0x99, 0x81, 0x99,
	0xdc, 0x90, 0xcd, 0xa0, 0xfb, 0x16, 0xbe, 0x8c, 0xef, 0x60, 0xb9, 0xa5, 0xa5, 0xcc, 0xbc, 0x88,
	0xec, 0xcd, 0x8a, 0x6b, 0x61, 0x95, 0x73, 0x72, 0xbf, 0xcb, 0x3d, 0x1c, 0x3a, 0x0f, 0x2a, 0xd4,
	0x2d, 0x68, 0x08, 0x46, 0x82, 0x5f, 0x68, 0x70, 0x31, 0x28, 0x1d, 0x17, 0x9d, 0xb7, 0x41, 0x3d,
	0x99, 0xdc, 0x07, 0x88, 0xc0, 0x8e, 0x12, 0x95, 0xff, 0xc0, 0x3b, 0x72, 0x36, 0xb1, 0x60, 0x01,
	0x41, 0xb9, 0x51, 0x69, 0x67, 0x36, 0xb5, 0x00, 0xb6, 0x31, 0x12, 0x5d, 0xd1, 0x95, 0x52, 0xb9,
	0x55, 0x1a, 0x9d, 0xbc, 0x11, 0x7a, 0x78, 0xb3, 0xbd, 0xf4, 0x90, 0x0e, 0xb1, 0x09, 0x1d, 0xeb,
	0x4a, 0xd5, 0x8e, 0x93, 0x63, 0x72, 0xba, 0x7f, 0x9f, 0x0c, 0xbb, 0xa4, 0x53, 0x67, 0x9e, 0x6f,
	0x5b, 0xdf, 0x98, 0xd6, 0xb8, 0xa8, 0x62, 0x0d, 0xee, 0x7b, 0x93, 0xff, 0x43, 0xf2, 0x6f, 0x80,
	0x31, 0x3a, 0xaa, 0xd4, 0xb2, 0xe2, 0xff, 0x11, 0x44, 0xcd, 0xe6, 0xf4, 0xa0, 0xe8, 0xca, 0xd2,
	0x84, 0x2b, 0xad, 0xa1, 0x73, 0x91, 0x8f, 0x70, 0xf8, 0xfb, 0x73, 0x93, 0xc6, 0x81, 0xd3, 0x86,
	0x8f, 0x53, 0x1a, 0x34, 0xd7, 0x77, 0xef, 0xbd, 0x20, 0xeb, 0x5e, 0x90, 0xcf, 0x5e, 0x90, 0xd7,
	0x41, 0x64, 0xeb, 0x41, 0x64, 0x1f, 0x83, 0xc8, 0x1e, 0xcf, 0x6d, 0x1d, 0x1b, 0x55, 0xe4, 0x1a,
	0x5a, 0x99, 0x9a, 0xd9, 0x3e, 0x67, 0xd8, 0xec, 0x8b, 0xdc, 0xa9, 0x39, 0xae, 0xbc, 0x59, 0x16,
	0x7b, 0x58, 0xc5, 0xc5, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0x22, 0x93, 0x90, 0x04, 0x81, 0x01,
	0x00, 0x00,
}

func (m *ContractUpgrade) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContractUpgrade) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContractUpgrade) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Nonce) > 0 {
		i -= len(m.Nonce)
		copy(dAtA[i:], m.Nonce)
		i = encodeVarintOpContractUpgrade(dAtA, i, uint64(len(m.Nonce)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.BufferAccount) > 0 {
		i -= len(m.BufferAccount)
		copy(dAtA[i:], m.BufferAccount)
		i = encodeVarintOpContractUpgrade(dAtA, i, uint64(len(m.BufferAccount)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintOpContractUpgrade(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NewImplementationContract) > 0 {
		i -= len(m.NewImplementationContract)
		copy(dAtA[i:], m.NewImplementationContract)
		i = encodeVarintOpContractUpgrade(dAtA, i, uint64(len(m.NewImplementationContract)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintOpContractUpgrade(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintOpContractUpgrade(dAtA []byte, offset int, v uint64) int {
	offset -= sovOpContractUpgrade(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ContractUpgrade) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovOpContractUpgrade(uint64(l))
	}
	l = len(m.NewImplementationContract)
	if l > 0 {
		n += 1 + l + sovOpContractUpgrade(uint64(l))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovOpContractUpgrade(uint64(l))
	}
	l = len(m.BufferAccount)
	if l > 0 {
		n += 1 + l + sovOpContractUpgrade(uint64(l))
	}
	l = len(m.Nonce)
	if l > 0 {
		n += 1 + l + sovOpContractUpgrade(uint64(l))
	}
	return n
}

func sovOpContractUpgrade(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOpContractUpgrade(x uint64) (n int) {
	return sovOpContractUpgrade(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ContractUpgrade) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOpContractUpgrade
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContractUpgrade: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContractUpgrade: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpContractUpgrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpContractUpgrade
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOpContractUpgrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewImplementationContract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpContractUpgrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpContractUpgrade
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOpContractUpgrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewImplementationContract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpContractUpgrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpContractUpgrade
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOpContractUpgrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BufferAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpContractUpgrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpContractUpgrade
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOpContractUpgrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BufferAccount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpContractUpgrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpContractUpgrade
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOpContractUpgrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nonce = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOpContractUpgrade(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOpContractUpgrade
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOpContractUpgrade(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOpContractUpgrade
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOpContractUpgrade
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOpContractUpgrade
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOpContractUpgrade
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOpContractUpgrade
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOpContractUpgrade
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOpContractUpgrade        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOpContractUpgrade          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOpContractUpgrade = fmt.Errorf("proto: unexpected end of group")
)
