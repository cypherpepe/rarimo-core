// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: rarimocore/violation_report.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ViolationType int32

const (
	ViolationType_Offline ViolationType = 0
	ViolationType_Spam    ViolationType = 1
	ViolationType_Other   ViolationType = 3
)

var ViolationType_name = map[int32]string{
	0: "Offline",
	1: "Spam",
	3: "Other",
}

var ViolationType_value = map[string]int32{
	"Offline": 0,
	"Spam":    1,
	"Other":   3,
}

func (x ViolationType) String() string {
	return proto.EnumName(ViolationType_name, int32(x))
}

func (ViolationType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5f6392b6292027b7, []int{0}
}

type ViolationReportIndex struct {
	SessionId     string        `protobuf:"bytes,1,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
	Offender      string        `protobuf:"bytes,2,opt,name=offender,proto3" json:"offender,omitempty"`
	ViolationType ViolationType `protobuf:"varint,3,opt,name=violationType,proto3,enum=rarimo.rarimocore.rarimocore.ViolationType" json:"violationType,omitempty"`
}

func (m *ViolationReportIndex) Reset()         { *m = ViolationReportIndex{} }
func (m *ViolationReportIndex) String() string { return proto.CompactTextString(m) }
func (*ViolationReportIndex) ProtoMessage()    {}
func (*ViolationReportIndex) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f6392b6292027b7, []int{0}
}
func (m *ViolationReportIndex) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ViolationReportIndex) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ViolationReportIndex.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ViolationReportIndex) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ViolationReportIndex.Merge(m, src)
}
func (m *ViolationReportIndex) XXX_Size() int {
	return m.Size()
}
func (m *ViolationReportIndex) XXX_DiscardUnknown() {
	xxx_messageInfo_ViolationReportIndex.DiscardUnknown(m)
}

var xxx_messageInfo_ViolationReportIndex proto.InternalMessageInfo

func (m *ViolationReportIndex) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (m *ViolationReportIndex) GetOffender() string {
	if m != nil {
		return m.Offender
	}
	return ""
}

func (m *ViolationReportIndex) GetViolationType() ViolationType {
	if m != nil {
		return m.ViolationType
	}
	return ViolationType_Offline
}

type ViolationReport struct {
	Index  *ViolationReportIndex `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	Sender string                `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
	// Optional message
	Msg string `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *ViolationReport) Reset()         { *m = ViolationReport{} }
func (m *ViolationReport) String() string { return proto.CompactTextString(m) }
func (*ViolationReport) ProtoMessage()    {}
func (*ViolationReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f6392b6292027b7, []int{1}
}
func (m *ViolationReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ViolationReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ViolationReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ViolationReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ViolationReport.Merge(m, src)
}
func (m *ViolationReport) XXX_Size() int {
	return m.Size()
}
func (m *ViolationReport) XXX_DiscardUnknown() {
	xxx_messageInfo_ViolationReport.DiscardUnknown(m)
}

var xxx_messageInfo_ViolationReport proto.InternalMessageInfo

func (m *ViolationReport) GetIndex() *ViolationReportIndex {
	if m != nil {
		return m.Index
	}
	return nil
}

func (m *ViolationReport) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *ViolationReport) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func init() {
	proto.RegisterEnum("rarimo.rarimocore.rarimocore.ViolationType", ViolationType_name, ViolationType_value)
	proto.RegisterType((*ViolationReportIndex)(nil), "rarimo.rarimocore.rarimocore.ViolationReportIndex")
	proto.RegisterType((*ViolationReport)(nil), "rarimo.rarimocore.rarimocore.ViolationReport")
}

func init() { proto.RegisterFile("rarimocore/violation_report.proto", fileDescriptor_5f6392b6292027b7) }

var fileDescriptor_5f6392b6292027b7 = []byte{
	// 306 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x2c, 0x4a, 0x2c, 0xca,
	0xcc, 0xcd, 0x4f, 0xce, 0x2f, 0x4a, 0xd5, 0x2f, 0xcb, 0xcc, 0xcf, 0x49, 0x2c, 0xc9, 0xcc, 0xcf,
	0x8b, 0x2f, 0x4a, 0x2d, 0xc8, 0x2f, 0x2a, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x92, 0x81,
	0x28, 0xd1, 0x43, 0xa8, 0x44, 0x62, 0x2a, 0x2d, 0x66, 0xe4, 0x12, 0x09, 0x83, 0x69, 0x0c, 0x02,
	0xeb, 0xf3, 0xcc, 0x4b, 0x49, 0xad, 0x10, 0x92, 0xe1, 0xe2, 0x2c, 0x4e, 0x2d, 0x2e, 0xce, 0xcc,
	0xcf, 0xf3, 0x4c, 0x91, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x42, 0x08, 0x08, 0x49, 0x71, 0x71,
	0xe4, 0xa7, 0xa5, 0xa5, 0xe6, 0xa5, 0xa4, 0x16, 0x49, 0x30, 0x81, 0x25, 0xe1, 0x7c, 0xa1, 0x40,
	0x2e, 0x5e, 0xb8, 0x53, 0x42, 0x2a, 0x0b, 0x52, 0x25, 0x98, 0x15, 0x18, 0x35, 0xf8, 0x8c, 0xb4,
	0xf5, 0xf0, 0x39, 0x44, 0x2f, 0x0c, 0x59, 0x4b, 0x10, 0xaa, 0x09, 0x4a, 0xad, 0x8c, 0x5c, 0xfc,
	0x68, 0xae, 0x14, 0xf2, 0xe0, 0x62, 0xcd, 0x04, 0xb9, 0x14, 0xec, 0x38, 0x6e, 0x23, 0x23, 0x22,
	0x8d, 0x47, 0xf2, 0x63, 0x10, 0xc4, 0x00, 0x21, 0x31, 0x2e, 0xb6, 0x62, 0x64, 0xaf, 0x40, 0x79,
	0x42, 0x02, 0x5c, 0xcc, 0xb9, 0xc5, 0xe9, 0x60, 0xe7, 0x73, 0x06, 0x81, 0x98, 0x5a, 0x86, 0x5c,
	0xbc, 0x28, 0xee, 0x14, 0xe2, 0xe6, 0x62, 0xf7, 0x4f, 0x4b, 0xcb, 0xc9, 0xcc, 0x4b, 0x15, 0x60,
	0x10, 0xe2, 0xe0, 0x62, 0x09, 0x2e, 0x48, 0xcc, 0x15, 0x60, 0x14, 0xe2, 0xe4, 0x62, 0xf5, 0x2f,
	0xc9, 0x48, 0x2d, 0x12, 0x60, 0x76, 0xf2, 0x3a, 0xf1, 0x48, 0x8e, 0xf1, 0xc2, 0x23, 0x39, 0xc6,
	0x07, 0x8f, 0xe4, 0x18, 0x27, 0x3c, 0x96, 0x63, 0xb8, 0xf0, 0x58, 0x8e, 0xe1, 0xc6, 0x63, 0x39,
	0x86, 0x28, 0x83, 0xf4, 0xcc, 0x92, 0x9c, 0xc4, 0x24, 0xbd, 0xe4, 0xfc, 0x5c, 0x7d, 0x88, 0x4b,
	0xa1, 0x94, 0x2e, 0x38, 0x3a, 0x2b, 0xf4, 0x91, 0xe2, 0xb6, 0xa4, 0xb2, 0x20, 0xb5, 0x38, 0x89,
	0x0d, 0x1c, 0xa3, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x21, 0x49, 0xe5, 0x39, 0xf6, 0x01,
	0x00, 0x00,
}

func (m *ViolationReportIndex) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ViolationReportIndex) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ViolationReportIndex) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ViolationType != 0 {
		i = encodeVarintViolationReport(dAtA, i, uint64(m.ViolationType))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Offender) > 0 {
		i -= len(m.Offender)
		copy(dAtA[i:], m.Offender)
		i = encodeVarintViolationReport(dAtA, i, uint64(len(m.Offender)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SessionId) > 0 {
		i -= len(m.SessionId)
		copy(dAtA[i:], m.SessionId)
		i = encodeVarintViolationReport(dAtA, i, uint64(len(m.SessionId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ViolationReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ViolationReport) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ViolationReport) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintViolationReport(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintViolationReport(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x12
	}
	if m.Index != nil {
		{
			size, err := m.Index.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintViolationReport(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintViolationReport(dAtA []byte, offset int, v uint64) int {
	offset -= sovViolationReport(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ViolationReportIndex) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SessionId)
	if l > 0 {
		n += 1 + l + sovViolationReport(uint64(l))
	}
	l = len(m.Offender)
	if l > 0 {
		n += 1 + l + sovViolationReport(uint64(l))
	}
	if m.ViolationType != 0 {
		n += 1 + sovViolationReport(uint64(m.ViolationType))
	}
	return n
}

func (m *ViolationReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Index != nil {
		l = m.Index.Size()
		n += 1 + l + sovViolationReport(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovViolationReport(uint64(l))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovViolationReport(uint64(l))
	}
	return n
}

func sovViolationReport(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozViolationReport(x uint64) (n int) {
	return sovViolationReport(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ViolationReportIndex) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowViolationReport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ViolationReportIndex: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ViolationReportIndex: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViolationReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthViolationReport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthViolationReport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViolationReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthViolationReport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthViolationReport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Offender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViolationType", wireType)
			}
			m.ViolationType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViolationReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ViolationType |= ViolationType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipViolationReport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthViolationReport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ViolationReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowViolationReport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ViolationReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ViolationReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViolationReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthViolationReport
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthViolationReport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Index == nil {
				m.Index = &ViolationReportIndex{}
			}
			if err := m.Index.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViolationReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthViolationReport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthViolationReport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowViolationReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthViolationReport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthViolationReport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipViolationReport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthViolationReport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipViolationReport(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowViolationReport
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowViolationReport
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowViolationReport
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthViolationReport
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupViolationReport
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthViolationReport
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthViolationReport        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowViolationReport          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupViolationReport = fmt.Errorf("proto: unexpected end of group")
)
