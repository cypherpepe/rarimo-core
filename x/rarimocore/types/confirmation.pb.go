// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: rarimocore/confirmation.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ConfirmationMeta struct {
	NewKeyECDSA string   `protobuf:"bytes,1,opt,name=newKeyECDSA,proto3" json:"newKeyECDSA,omitempty"`
	PartyKey    []string `protobuf:"bytes,2,rep,name=partyKey,proto3" json:"partyKey,omitempty"`
}

func (m *ConfirmationMeta) Reset()         { *m = ConfirmationMeta{} }
func (m *ConfirmationMeta) String() string { return proto.CompactTextString(m) }
func (*ConfirmationMeta) ProtoMessage()    {}
func (*ConfirmationMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_862d5195a2826b26, []int{0}
}
func (m *ConfirmationMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfirmationMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConfirmationMeta.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConfirmationMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfirmationMeta.Merge(m, src)
}
func (m *ConfirmationMeta) XXX_Size() int {
	return m.Size()
}
func (m *ConfirmationMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfirmationMeta.DiscardUnknown(m)
}

var xxx_messageInfo_ConfirmationMeta proto.InternalMessageInfo

func (m *ConfirmationMeta) GetNewKeyECDSA() string {
	if m != nil {
		return m.NewKeyECDSA
	}
	return ""
}

func (m *ConfirmationMeta) GetPartyKey() []string {
	if m != nil {
		return m.PartyKey
	}
	return nil
}

type Confirmation struct {
	// hex-encoded
	Root string `protobuf:"bytes,1,opt,name=root,proto3" json:"root,omitempty"`
	// hex-encoded
	Indexes []string `protobuf:"bytes,2,rep,name=indexes,proto3" json:"indexes,omitempty"`
	// hex-encoded
	SignatureECDSA string            `protobuf:"bytes,3,opt,name=signatureECDSA,proto3" json:"signatureECDSA,omitempty"`
	Creator        string            `protobuf:"bytes,4,opt,name=creator,proto3" json:"creator,omitempty"`
	Meta           *ConfirmationMeta `protobuf:"bytes,5,opt,name=meta,proto3" json:"meta,omitempty"`
}

func (m *Confirmation) Reset()         { *m = Confirmation{} }
func (m *Confirmation) String() string { return proto.CompactTextString(m) }
func (*Confirmation) ProtoMessage()    {}
func (*Confirmation) Descriptor() ([]byte, []int) {
	return fileDescriptor_862d5195a2826b26, []int{1}
}
func (m *Confirmation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Confirmation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Confirmation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Confirmation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Confirmation.Merge(m, src)
}
func (m *Confirmation) XXX_Size() int {
	return m.Size()
}
func (m *Confirmation) XXX_DiscardUnknown() {
	xxx_messageInfo_Confirmation.DiscardUnknown(m)
}

var xxx_messageInfo_Confirmation proto.InternalMessageInfo

func (m *Confirmation) GetRoot() string {
	if m != nil {
		return m.Root
	}
	return ""
}

func (m *Confirmation) GetIndexes() []string {
	if m != nil {
		return m.Indexes
	}
	return nil
}

func (m *Confirmation) GetSignatureECDSA() string {
	if m != nil {
		return m.SignatureECDSA
	}
	return ""
}

func (m *Confirmation) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Confirmation) GetMeta() *ConfirmationMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func init() {
	proto.RegisterType((*ConfirmationMeta)(nil), "rarifyprotocol.rarimocore.rarimocore.ConfirmationMeta")
	proto.RegisterType((*Confirmation)(nil), "rarifyprotocol.rarimocore.rarimocore.Confirmation")
}

func init() { proto.RegisterFile("rarimocore/confirmation.proto", fileDescriptor_862d5195a2826b26) }

var fileDescriptor_862d5195a2826b26 = []byte{
	// 288 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0x4f, 0x4b, 0xc3, 0x40,
	0x10, 0xc5, 0xbb, 0x36, 0xfe, 0xe9, 0x56, 0x44, 0xf6, 0x14, 0x04, 0x97, 0x50, 0x44, 0x72, 0x69,
	0x02, 0x0a, 0x82, 0x47, 0xad, 0x5e, 0x2c, 0x82, 0xa4, 0x37, 0x6f, 0xdb, 0x38, 0x2d, 0x0b, 0x4d,
	0x26, 0x6c, 0x46, 0x6c, 0xbe, 0x85, 0x1f, 0x4b, 0x3c, 0xf5, 0xe8, 0x51, 0x92, 0x2f, 0x22, 0xdd,
	0x34, 0x1a, 0x7a, 0xf2, 0xb6, 0x6f, 0xf6, 0xbd, 0xdf, 0x83, 0x19, 0x7e, 0x6a, 0x94, 0xd1, 0x09,
	0xc6, 0x68, 0x20, 0x8c, 0x31, 0x9d, 0x69, 0x93, 0x28, 0xd2, 0x98, 0x06, 0x99, 0x41, 0x42, 0x71,
	0xb6, 0xfe, 0x9e, 0x15, 0x56, 0xc4, 0xb8, 0x08, 0xfe, 0xdc, 0xad, 0xe7, 0xe0, 0x89, 0x1f, 0x8f,
	0x5a, 0xd9, 0x47, 0x20, 0x25, 0x3c, 0xde, 0x4f, 0xe1, 0x6d, 0x0c, 0xc5, 0xfd, 0xe8, 0x6e, 0x72,
	0xe3, 0x32, 0x8f, 0xf9, 0xbd, 0xa8, 0x3d, 0x12, 0x27, 0xfc, 0x20, 0x53, 0x86, 0x8a, 0x31, 0x14,
	0xee, 0x8e, 0xd7, 0xf5, 0x7b, 0xd1, 0xaf, 0x1e, 0x7c, 0x32, 0x7e, 0xd8, 0x46, 0x0a, 0xc1, 0x1d,
	0x83, 0x48, 0x1b, 0x8e, 0x7d, 0x0b, 0x97, 0xef, 0xeb, 0xf4, 0x05, 0x96, 0x90, 0x6f, 0xf2, 0x8d,
	0x14, 0xe7, 0xfc, 0x28, 0xd7, 0xf3, 0x54, 0xd1, 0xab, 0x81, 0xba, 0xbf, 0x6b, 0x73, 0x5b, 0xd3,
	0x35, 0x21, 0x36, 0xa0, 0x08, 0x8d, 0xeb, 0x58, 0x43, 0x23, 0xc5, 0x03, 0x77, 0x12, 0x20, 0xe5,
	0xee, 0x7a, 0xcc, 0xef, 0x5f, 0x5c, 0x05, 0xff, 0xd9, 0x43, 0xb0, 0xbd, 0x84, 0xc8, 0x32, 0x6e,
	0x27, 0x1f, 0xa5, 0x64, 0xab, 0x52, 0xb2, 0xef, 0x52, 0xb2, 0xf7, 0x4a, 0x76, 0x56, 0x95, 0xec,
	0x7c, 0x55, 0xb2, 0xf3, 0x7c, 0x3d, 0xd7, 0xb4, 0x50, 0xd3, 0x20, 0xc6, 0x24, 0xac, 0x1b, 0x86,
	0x4d, 0x45, 0x58, 0x73, 0x87, 0xf6, 0x32, 0xcb, 0xb0, 0x75, 0x26, 0x2a, 0x32, 0xc8, 0xa7, 0x7b,
	0xd6, 0x78, 0xf9, 0x13, 0x00, 0x00, 0xff, 0xff, 0x62, 0xb8, 0x25, 0xf0, 0xc1, 0x01, 0x00, 0x00,
}

func (m *ConfirmationMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfirmationMeta) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfirmationMeta) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PartyKey) > 0 {
		for iNdEx := len(m.PartyKey) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PartyKey[iNdEx])
			copy(dAtA[i:], m.PartyKey[iNdEx])
			i = encodeVarintConfirmation(dAtA, i, uint64(len(m.PartyKey[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.NewKeyECDSA) > 0 {
		i -= len(m.NewKeyECDSA)
		copy(dAtA[i:], m.NewKeyECDSA)
		i = encodeVarintConfirmation(dAtA, i, uint64(len(m.NewKeyECDSA)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Confirmation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Confirmation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Confirmation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		{
			size, err := m.Meta.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConfirmation(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintConfirmation(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SignatureECDSA) > 0 {
		i -= len(m.SignatureECDSA)
		copy(dAtA[i:], m.SignatureECDSA)
		i = encodeVarintConfirmation(dAtA, i, uint64(len(m.SignatureECDSA)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Indexes) > 0 {
		for iNdEx := len(m.Indexes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Indexes[iNdEx])
			copy(dAtA[i:], m.Indexes[iNdEx])
			i = encodeVarintConfirmation(dAtA, i, uint64(len(m.Indexes[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Root) > 0 {
		i -= len(m.Root)
		copy(dAtA[i:], m.Root)
		i = encodeVarintConfirmation(dAtA, i, uint64(len(m.Root)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintConfirmation(dAtA []byte, offset int, v uint64) int {
	offset -= sovConfirmation(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ConfirmationMeta) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NewKeyECDSA)
	if l > 0 {
		n += 1 + l + sovConfirmation(uint64(l))
	}
	if len(m.PartyKey) > 0 {
		for _, s := range m.PartyKey {
			l = len(s)
			n += 1 + l + sovConfirmation(uint64(l))
		}
	}
	return n
}

func (m *Confirmation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Root)
	if l > 0 {
		n += 1 + l + sovConfirmation(uint64(l))
	}
	if len(m.Indexes) > 0 {
		for _, s := range m.Indexes {
			l = len(s)
			n += 1 + l + sovConfirmation(uint64(l))
		}
	}
	l = len(m.SignatureECDSA)
	if l > 0 {
		n += 1 + l + sovConfirmation(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovConfirmation(uint64(l))
	}
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovConfirmation(uint64(l))
	}
	return n
}

func sovConfirmation(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozConfirmation(x uint64) (n int) {
	return sovConfirmation(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ConfirmationMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfirmation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfirmationMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfirmationMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewKeyECDSA", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfirmation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfirmation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfirmation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewKeyECDSA = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartyKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfirmation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfirmation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfirmation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PartyKey = append(m.PartyKey, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfirmation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConfirmation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Confirmation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfirmation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Confirmation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Confirmation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Root", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfirmation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfirmation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfirmation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Root = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Indexes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfirmation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfirmation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfirmation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Indexes = append(m.Indexes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignatureECDSA", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfirmation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfirmation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfirmation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignatureECDSA = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfirmation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfirmation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfirmation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfirmation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfirmation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfirmation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &ConfirmationMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfirmation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConfirmation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipConfirmation(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowConfirmation
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConfirmation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConfirmation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthConfirmation
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupConfirmation
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthConfirmation
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthConfirmation        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowConfirmation          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupConfirmation = fmt.Errorf("proto: unexpected end of group")
)
