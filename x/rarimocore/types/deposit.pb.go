// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: rarimocore/deposit.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Deposit struct {
	// hex-encoded keccak256 hash for tx||event||chain strings' bytes
	Index     string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	Tx        string `protobuf:"bytes,2,opt,name=tx,proto3" json:"tx,omitempty"`
	EventId   string `protobuf:"bytes,3,opt,name=eventId,proto3" json:"eventId,omitempty"`
	FromChain string `protobuf:"bytes,4,opt,name=fromChain,proto3" json:"fromChain,omitempty"`
	ToChain   string `protobuf:"bytes,5,opt,name=toChain,proto3" json:"toChain,omitempty"`
	// hex-encoded
	Receiver string `protobuf:"bytes,6,opt,name=receiver,proto3" json:"receiver,omitempty"`
	// dec-encoded
	Amount     string `protobuf:"bytes,7,opt,name=amount,proto3" json:"amount,omitempty"`
	Creator    string `protobuf:"bytes,8,opt,name=creator,proto3" json:"creator,omitempty"`
	Signed     bool   `protobuf:"varint,9,opt,name=signed,proto3" json:"signed,omitempty"`
	TokenIndex string `protobuf:"bytes,10,opt,name=tokenIndex,proto3" json:"tokenIndex,omitempty"`
	Timestamp  uint64 `protobuf:"varint,11,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (m *Deposit) Reset()         { *m = Deposit{} }
func (m *Deposit) String() string { return proto.CompactTextString(m) }
func (*Deposit) ProtoMessage()    {}
func (*Deposit) Descriptor() ([]byte, []int) {
	return fileDescriptor_24f8a86eafda8811, []int{0}
}
func (m *Deposit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Deposit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Deposit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Deposit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Deposit.Merge(m, src)
}
func (m *Deposit) XXX_Size() int {
	return m.Size()
}
func (m *Deposit) XXX_DiscardUnknown() {
	xxx_messageInfo_Deposit.DiscardUnknown(m)
}

var xxx_messageInfo_Deposit proto.InternalMessageInfo

func (m *Deposit) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *Deposit) GetTx() string {
	if m != nil {
		return m.Tx
	}
	return ""
}

func (m *Deposit) GetEventId() string {
	if m != nil {
		return m.EventId
	}
	return ""
}

func (m *Deposit) GetFromChain() string {
	if m != nil {
		return m.FromChain
	}
	return ""
}

func (m *Deposit) GetToChain() string {
	if m != nil {
		return m.ToChain
	}
	return ""
}

func (m *Deposit) GetReceiver() string {
	if m != nil {
		return m.Receiver
	}
	return ""
}

func (m *Deposit) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *Deposit) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Deposit) GetSigned() bool {
	if m != nil {
		return m.Signed
	}
	return false
}

func (m *Deposit) GetTokenIndex() string {
	if m != nil {
		return m.TokenIndex
	}
	return ""
}

func (m *Deposit) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func init() {
	proto.RegisterType((*Deposit)(nil), "rarifyprotocol.rarimocore.rarimocore.Deposit")
}

func init() { proto.RegisterFile("rarimocore/deposit.proto", fileDescriptor_24f8a86eafda8811) }

var fileDescriptor_24f8a86eafda8811 = []byte{
	// 304 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x91, 0xbf, 0x4e, 0xc3, 0x30,
	0x10, 0xc6, 0xeb, 0xd0, 0xbf, 0x46, 0x62, 0xb0, 0x10, 0xb2, 0x10, 0xb2, 0x2a, 0xc4, 0xd0, 0xa5,
	0xcd, 0xc0, 0xc4, 0x0a, 0x2c, 0x5d, 0xcb, 0xc6, 0xe6, 0x26, 0xd7, 0x62, 0x51, 0xfb, 0x22, 0xe7,
	0xa8, 0xd2, 0xb7, 0xe0, 0x25, 0x78, 0x17, 0xc6, 0x8e, 0x8c, 0xa8, 0x7d, 0x11, 0x14, 0x3b, 0xa5,
	0xdd, 0xf2, 0xfb, 0xbe, 0xfb, 0x4e, 0xf1, 0x77, 0x5c, 0x7a, 0xed, 0x8d, 0xc5, 0x0c, 0x3d, 0xa4,
	0x39, 0x14, 0x58, 0x1a, 0x9a, 0x14, 0x1e, 0x09, 0xc5, 0x5d, 0xed, 0x2c, 0x36, 0x01, 0x32, 0x5c,
	0x4d, 0x8e, 0x83, 0x27, 0x9f, 0xb7, 0x5f, 0x09, 0xef, 0x3d, 0xc7, 0x9c, 0xb8, 0xe4, 0x1d, 0xe3,
	0x72, 0xa8, 0x24, 0x1b, 0xb2, 0xd1, 0x60, 0x16, 0x41, 0x5c, 0xf0, 0x84, 0x2a, 0x99, 0x04, 0x29,
	0xa1, 0x4a, 0x48, 0xde, 0x83, 0x35, 0x38, 0x9a, 0xe6, 0xf2, 0x2c, 0x88, 0x07, 0x14, 0x37, 0x7c,
	0xb0, 0xf0, 0x68, 0x9f, 0xde, 0xb4, 0x71, 0xb2, 0x1d, 0xbc, 0xa3, 0x50, 0xe7, 0x08, 0xa3, 0xd7,
	0x89, 0xb9, 0x06, 0xc5, 0x35, 0xef, 0x7b, 0xc8, 0xc0, 0xac, 0xc1, 0xcb, 0x6e, 0xb0, 0xfe, 0x59,
	0x5c, 0xf1, 0xae, 0xb6, 0xf8, 0xe1, 0x48, 0xf6, 0x82, 0xd3, 0x50, 0xbd, 0x2d, 0xf3, 0xa0, 0x09,
	0xbd, 0xec, 0xc7, 0x6d, 0x0d, 0xd6, 0x89, 0xd2, 0x2c, 0x1d, 0xe4, 0x72, 0x30, 0x64, 0xa3, 0xfe,
	0xac, 0x21, 0xa1, 0x38, 0x27, 0x7c, 0x07, 0x37, 0x0d, 0x4f, 0xe4, 0x21, 0x74, 0xa2, 0xd4, 0x7f,
	0x4f, 0xc6, 0x42, 0x49, 0xda, 0x16, 0xf2, 0x7c, 0xc8, 0x46, 0xed, 0xd9, 0x51, 0x78, 0x7c, 0xf9,
	0xde, 0x29, 0xb6, 0xdd, 0x29, 0xf6, 0xbb, 0x53, 0xec, 0x73, 0xaf, 0x5a, 0xdb, 0xbd, 0x6a, 0xfd,
	0xec, 0x55, 0xeb, 0xf5, 0x61, 0x69, 0x68, 0xa5, 0xe7, 0x93, 0x0c, 0x6d, 0x1a, 0x2b, 0x1f, 0x1f,
	0x3a, 0x4f, 0x63, 0xd1, 0xe3, 0x70, 0x9d, 0x2a, 0x3d, 0x39, 0x15, 0x6d, 0x0a, 0x28, 0xe7, 0xdd,
	0x30, 0x78, 0xff, 0x17, 0x00, 0x00, 0xff, 0xff, 0x51, 0xca, 0xb1, 0xd9, 0xc5, 0x01, 0x00, 0x00,
}

func (m *Deposit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Deposit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Deposit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Timestamp != 0 {
		i = encodeVarintDeposit(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x58
	}
	if len(m.TokenIndex) > 0 {
		i -= len(m.TokenIndex)
		copy(dAtA[i:], m.TokenIndex)
		i = encodeVarintDeposit(dAtA, i, uint64(len(m.TokenIndex)))
		i--
		dAtA[i] = 0x52
	}
	if m.Signed {
		i--
		if m.Signed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintDeposit(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintDeposit(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Receiver) > 0 {
		i -= len(m.Receiver)
		copy(dAtA[i:], m.Receiver)
		i = encodeVarintDeposit(dAtA, i, uint64(len(m.Receiver)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ToChain) > 0 {
		i -= len(m.ToChain)
		copy(dAtA[i:], m.ToChain)
		i = encodeVarintDeposit(dAtA, i, uint64(len(m.ToChain)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.FromChain) > 0 {
		i -= len(m.FromChain)
		copy(dAtA[i:], m.FromChain)
		i = encodeVarintDeposit(dAtA, i, uint64(len(m.FromChain)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.EventId) > 0 {
		i -= len(m.EventId)
		copy(dAtA[i:], m.EventId)
		i = encodeVarintDeposit(dAtA, i, uint64(len(m.EventId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Tx) > 0 {
		i -= len(m.Tx)
		copy(dAtA[i:], m.Tx)
		i = encodeVarintDeposit(dAtA, i, uint64(len(m.Tx)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintDeposit(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintDeposit(dAtA []byte, offset int, v uint64) int {
	offset -= sovDeposit(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Deposit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovDeposit(uint64(l))
	}
	l = len(m.Tx)
	if l > 0 {
		n += 1 + l + sovDeposit(uint64(l))
	}
	l = len(m.EventId)
	if l > 0 {
		n += 1 + l + sovDeposit(uint64(l))
	}
	l = len(m.FromChain)
	if l > 0 {
		n += 1 + l + sovDeposit(uint64(l))
	}
	l = len(m.ToChain)
	if l > 0 {
		n += 1 + l + sovDeposit(uint64(l))
	}
	l = len(m.Receiver)
	if l > 0 {
		n += 1 + l + sovDeposit(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovDeposit(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovDeposit(uint64(l))
	}
	if m.Signed {
		n += 2
	}
	l = len(m.TokenIndex)
	if l > 0 {
		n += 1 + l + sovDeposit(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovDeposit(uint64(m.Timestamp))
	}
	return n
}

func sovDeposit(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDeposit(x uint64) (n int) {
	return sovDeposit(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Deposit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDeposit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Deposit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Deposit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeposit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeposit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDeposit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tx", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeposit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeposit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDeposit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tx = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeposit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeposit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDeposit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeposit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeposit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDeposit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeposit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeposit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDeposit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeposit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeposit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDeposit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeposit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeposit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDeposit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeposit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeposit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDeposit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeposit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Signed = bool(v != 0)
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeposit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeposit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDeposit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeposit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDeposit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDeposit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDeposit(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDeposit
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDeposit
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDeposit
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDeposit
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDeposit
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDeposit
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDeposit        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDeposit          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDeposit = fmt.Errorf("proto: unexpected end of group")
)
