// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: rarimocore/op_transfer.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Transfer struct {
	// hex-encoded keccak256 hash for tx||event||chain strings' bytes
	Origin string `protobuf:"bytes,1,opt,name=origin,proto3" json:"origin,omitempty"`
	// Deposit transaction data
	Tx        string `protobuf:"bytes,2,opt,name=tx,proto3" json:"tx,omitempty"`
	EventId   string `protobuf:"bytes,3,opt,name=eventId,proto3" json:"eventId,omitempty"`
	FromChain string `protobuf:"bytes,4,opt,name=fromChain,proto3" json:"fromChain,omitempty"`
	ToChain   string `protobuf:"bytes,5,opt,name=toChain,proto3" json:"toChain,omitempty"`
	// hex-encoded
	Receiver string `protobuf:"bytes,6,opt,name=receiver,proto3" json:"receiver,omitempty"`
	// dec-encoded
	Amount string `protobuf:"bytes,7,opt,name=amount,proto3" json:"amount,omitempty"`
	// hex-encoded
	BundleData string `protobuf:"bytes,8,opt,name=bundleData,proto3" json:"bundleData,omitempty"`
	// hex-encoded
	BundleSalt string `protobuf:"bytes,9,opt,name=bundleSalt,proto3" json:"bundleSalt,omitempty"`
	TokenIndex string `protobuf:"bytes,12,opt,name=tokenIndex,proto3" json:"tokenIndex,omitempty"`
}

func (m *Transfer) Reset()         { *m = Transfer{} }
func (m *Transfer) String() string { return proto.CompactTextString(m) }
func (*Transfer) ProtoMessage()    {}
func (*Transfer) Descriptor() ([]byte, []int) {
	return fileDescriptor_5b795acb1df5370f, []int{0}
}
func (m *Transfer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Transfer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Transfer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Transfer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Transfer.Merge(m, src)
}
func (m *Transfer) XXX_Size() int {
	return m.Size()
}
func (m *Transfer) XXX_DiscardUnknown() {
	xxx_messageInfo_Transfer.DiscardUnknown(m)
}

var xxx_messageInfo_Transfer proto.InternalMessageInfo

func (m *Transfer) GetOrigin() string {
	if m != nil {
		return m.Origin
	}
	return ""
}

func (m *Transfer) GetTx() string {
	if m != nil {
		return m.Tx
	}
	return ""
}

func (m *Transfer) GetEventId() string {
	if m != nil {
		return m.EventId
	}
	return ""
}

func (m *Transfer) GetFromChain() string {
	if m != nil {
		return m.FromChain
	}
	return ""
}

func (m *Transfer) GetToChain() string {
	if m != nil {
		return m.ToChain
	}
	return ""
}

func (m *Transfer) GetReceiver() string {
	if m != nil {
		return m.Receiver
	}
	return ""
}

func (m *Transfer) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *Transfer) GetBundleData() string {
	if m != nil {
		return m.BundleData
	}
	return ""
}

func (m *Transfer) GetBundleSalt() string {
	if m != nil {
		return m.BundleSalt
	}
	return ""
}

func (m *Transfer) GetTokenIndex() string {
	if m != nil {
		return m.TokenIndex
	}
	return ""
}

func init() {
	proto.RegisterType((*Transfer)(nil), "rarimo.rarimocore.rarimocore.Transfer")
}

func init() { proto.RegisterFile("rarimocore/op_transfer.proto", fileDescriptor_5b795acb1df5370f) }

var fileDescriptor_5b795acb1df5370f = []byte{
	// 289 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x91, 0xb1, 0x4e, 0xeb, 0x30,
	0x14, 0x86, 0x9b, 0xdc, 0x4b, 0x9a, 0x58, 0x88, 0xc1, 0x03, 0xb2, 0x50, 0x65, 0x21, 0xc4, 0xc0,
	0x42, 0x82, 0xc4, 0x1b, 0x00, 0x4b, 0x19, 0x81, 0x89, 0x05, 0x39, 0x89, 0x53, 0x2c, 0x12, 0x9f,
	0xc8, 0x3d, 0xad, 0xd2, 0xb7, 0x60, 0xe4, 0x91, 0x18, 0x3b, 0x32, 0xa2, 0xe4, 0x45, 0x50, 0xec,
	0x40, 0x32, 0xd9, 0xff, 0xf7, 0xf9, 0x48, 0x47, 0xfe, 0xc9, 0xc2, 0x08, 0xa3, 0x2a, 0xc8, 0xc0,
	0xc8, 0x04, 0xea, 0x17, 0x34, 0x42, 0xaf, 0x0b, 0x69, 0xe2, 0xda, 0x00, 0x02, 0x3d, 0xef, 0x6d,
	0xb1, 0xb3, 0x21, 0x83, 0x32, 0x1e, 0x1f, 0x4f, 0xae, 0x67, 0x1f, 0x3e, 0x09, 0x9f, 0x86, 0x41,
	0x7a, 0x4c, 0x02, 0x30, 0x6a, 0xa5, 0x34, 0xf3, 0x4e, 0xbd, 0x8b, 0xe8, 0x61, 0x48, 0xf4, 0x88,
	0xf8, 0xd8, 0x30, 0xdf, 0x32, 0x1f, 0x1b, 0xca, 0xc8, 0x5c, 0x6e, 0xa5, 0xc6, 0x65, 0xce, 0xfe,
	0x59, 0xf8, 0x1b, 0xe9, 0x82, 0x44, 0x85, 0x81, 0xea, 0xf6, 0x55, 0x28, 0xcd, 0xfe, 0x5b, 0x37,
	0x82, 0x7e, 0x0e, 0xc1, 0xb9, 0x03, 0x37, 0x37, 0x44, 0x7a, 0x42, 0x42, 0x23, 0x33, 0xa9, 0xb6,
	0xd2, 0xb0, 0xc0, 0xaa, 0xbf, 0xdc, 0x6f, 0x25, 0x2a, 0xd8, 0x68, 0x64, 0x73, 0xb7, 0x95, 0x4b,
	0x94, 0x13, 0x92, 0x6e, 0x74, 0x5e, 0xca, 0x3b, 0x81, 0x82, 0x85, 0xd6, 0x4d, 0xc8, 0xe8, 0x1f,
	0x45, 0x89, 0x2c, 0x9a, 0xfa, 0x9e, 0xf4, 0x1e, 0xe1, 0x4d, 0xea, 0xa5, 0xce, 0x65, 0xc3, 0x0e,
	0x9d, 0x1f, 0xc9, 0xcd, 0xfd, 0x67, 0xcb, 0xbd, 0x7d, 0xcb, 0xbd, 0xef, 0x96, 0x7b, 0xef, 0x1d,
	0x9f, 0xed, 0x3b, 0x3e, 0xfb, 0xea, 0xf8, 0xec, 0xf9, 0x6a, 0xa5, 0xb0, 0x14, 0x69, 0x9c, 0x41,
	0x95, 0xb8, 0xbf, 0x1c, 0x8e, 0x4b, 0xdb, 0x45, 0x93, 0x4c, 0x8a, 0xc1, 0x5d, 0x2d, 0xd7, 0x69,
	0x60, 0x6b, 0xb8, 0xfe, 0x09, 0x00, 0x00, 0xff, 0xff, 0xab, 0x01, 0xb0, 0xb4, 0xb3, 0x01, 0x00,
	0x00,
}

func (m *Transfer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Transfer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Transfer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TokenIndex) > 0 {
		i -= len(m.TokenIndex)
		copy(dAtA[i:], m.TokenIndex)
		i = encodeVarintOpTransfer(dAtA, i, uint64(len(m.TokenIndex)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.BundleSalt) > 0 {
		i -= len(m.BundleSalt)
		copy(dAtA[i:], m.BundleSalt)
		i = encodeVarintOpTransfer(dAtA, i, uint64(len(m.BundleSalt)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.BundleData) > 0 {
		i -= len(m.BundleData)
		copy(dAtA[i:], m.BundleData)
		i = encodeVarintOpTransfer(dAtA, i, uint64(len(m.BundleData)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintOpTransfer(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Receiver) > 0 {
		i -= len(m.Receiver)
		copy(dAtA[i:], m.Receiver)
		i = encodeVarintOpTransfer(dAtA, i, uint64(len(m.Receiver)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ToChain) > 0 {
		i -= len(m.ToChain)
		copy(dAtA[i:], m.ToChain)
		i = encodeVarintOpTransfer(dAtA, i, uint64(len(m.ToChain)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.FromChain) > 0 {
		i -= len(m.FromChain)
		copy(dAtA[i:], m.FromChain)
		i = encodeVarintOpTransfer(dAtA, i, uint64(len(m.FromChain)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.EventId) > 0 {
		i -= len(m.EventId)
		copy(dAtA[i:], m.EventId)
		i = encodeVarintOpTransfer(dAtA, i, uint64(len(m.EventId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Tx) > 0 {
		i -= len(m.Tx)
		copy(dAtA[i:], m.Tx)
		i = encodeVarintOpTransfer(dAtA, i, uint64(len(m.Tx)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Origin) > 0 {
		i -= len(m.Origin)
		copy(dAtA[i:], m.Origin)
		i = encodeVarintOpTransfer(dAtA, i, uint64(len(m.Origin)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintOpTransfer(dAtA []byte, offset int, v uint64) int {
	offset -= sovOpTransfer(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Transfer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Origin)
	if l > 0 {
		n += 1 + l + sovOpTransfer(uint64(l))
	}
	l = len(m.Tx)
	if l > 0 {
		n += 1 + l + sovOpTransfer(uint64(l))
	}
	l = len(m.EventId)
	if l > 0 {
		n += 1 + l + sovOpTransfer(uint64(l))
	}
	l = len(m.FromChain)
	if l > 0 {
		n += 1 + l + sovOpTransfer(uint64(l))
	}
	l = len(m.ToChain)
	if l > 0 {
		n += 1 + l + sovOpTransfer(uint64(l))
	}
	l = len(m.Receiver)
	if l > 0 {
		n += 1 + l + sovOpTransfer(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovOpTransfer(uint64(l))
	}
	l = len(m.BundleData)
	if l > 0 {
		n += 1 + l + sovOpTransfer(uint64(l))
	}
	l = len(m.BundleSalt)
	if l > 0 {
		n += 1 + l + sovOpTransfer(uint64(l))
	}
	l = len(m.TokenIndex)
	if l > 0 {
		n += 1 + l + sovOpTransfer(uint64(l))
	}
	return n
}

func sovOpTransfer(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOpTransfer(x uint64) (n int) {
	return sovOpTransfer(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Transfer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOpTransfer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Transfer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Transfer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Origin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpTransfer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpTransfer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOpTransfer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Origin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tx", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpTransfer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpTransfer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOpTransfer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tx = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpTransfer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpTransfer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOpTransfer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpTransfer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpTransfer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOpTransfer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpTransfer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpTransfer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOpTransfer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpTransfer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpTransfer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOpTransfer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpTransfer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpTransfer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOpTransfer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BundleData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpTransfer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpTransfer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOpTransfer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BundleData = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BundleSalt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpTransfer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpTransfer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOpTransfer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BundleSalt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpTransfer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpTransfer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOpTransfer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOpTransfer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOpTransfer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOpTransfer(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOpTransfer
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOpTransfer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOpTransfer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOpTransfer
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOpTransfer
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOpTransfer
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOpTransfer        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOpTransfer          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOpTransfer = fmt.Errorf("proto: unexpected end of group")
)
