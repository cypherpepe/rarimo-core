// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: vestingmint/vesting.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Vesting struct {
	Index            uint64 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Account          string `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`
	Amount           string `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
	DeltaBlocks      uint64 `protobuf:"varint,4,opt,name=deltaBlocks,proto3" json:"deltaBlocks,omitempty"`
	NextDepositBlock uint64 `protobuf:"varint,5,opt,name=nextDepositBlock,proto3" json:"nextDepositBlock,omitempty"`
	PaymentsCount    uint64 `protobuf:"varint,6,opt,name=paymentsCount,proto3" json:"paymentsCount,omitempty"`
	Paid             string `protobuf:"bytes,7,opt,name=paid,proto3" json:"paid,omitempty"`
	Denom            string `protobuf:"bytes,8,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *Vesting) Reset()         { *m = Vesting{} }
func (m *Vesting) String() string { return proto.CompactTextString(m) }
func (*Vesting) ProtoMessage()    {}
func (*Vesting) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf0afe40e800cecd, []int{0}
}
func (m *Vesting) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Vesting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Vesting.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Vesting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vesting.Merge(m, src)
}
func (m *Vesting) XXX_Size() int {
	return m.Size()
}
func (m *Vesting) XXX_DiscardUnknown() {
	xxx_messageInfo_Vesting.DiscardUnknown(m)
}

var xxx_messageInfo_Vesting proto.InternalMessageInfo

func (m *Vesting) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *Vesting) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *Vesting) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *Vesting) GetDeltaBlocks() uint64 {
	if m != nil {
		return m.DeltaBlocks
	}
	return 0
}

func (m *Vesting) GetNextDepositBlock() uint64 {
	if m != nil {
		return m.NextDepositBlock
	}
	return 0
}

func (m *Vesting) GetPaymentsCount() uint64 {
	if m != nil {
		return m.PaymentsCount
	}
	return 0
}

func (m *Vesting) GetPaid() string {
	if m != nil {
		return m.Paid
	}
	return ""
}

func (m *Vesting) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func init() {
	proto.RegisterType((*Vesting)(nil), "rarimo.rarimocore.vestingmint.Vesting")
}

func init() { proto.RegisterFile("vestingmint/vesting.proto", fileDescriptor_bf0afe40e800cecd) }

var fileDescriptor_bf0afe40e800cecd = []byte{
	// 272 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x90, 0xcf, 0x4a, 0xc4, 0x30,
	0x10, 0x87, 0x1b, 0xed, 0xb6, 0x1a, 0x11, 0x24, 0x88, 0xc4, 0x83, 0xa1, 0x88, 0x87, 0x45, 0xb0,
	0x45, 0x7c, 0x83, 0xd5, 0x9b, 0xb7, 0x3d, 0x78, 0xf0, 0x96, 0x6d, 0xc3, 0x12, 0x6c, 0x92, 0xd2,
	0x8c, 0xd2, 0x7d, 0x0b, 0x1f, 0xcb, 0xe3, 0x1e, 0x3d, 0x4a, 0xfb, 0x00, 0xbe, 0x82, 0xec, 0xa4,
	0x42, 0xc5, 0xd3, 0xcc, 0xf7, 0xcd, 0x90, 0x3f, 0x3f, 0x7a, 0xfe, 0xa6, 0x3c, 0x68, 0xbb, 0x36,
	0xda, 0x42, 0x31, 0xf6, 0x79, 0xd3, 0x3a, 0x70, 0xec, 0xa2, 0x95, 0xad, 0x36, 0x2e, 0x0f, 0xa5,
	0x74, 0xad, 0xca, 0x27, 0xcb, 0x97, 0xdf, 0x84, 0xa6, 0x4f, 0x81, 0xd9, 0x29, 0x9d, 0x69, 0x5b,
	0xa9, 0x8e, 0x93, 0x8c, 0xcc, 0xe3, 0x65, 0x00, 0xc6, 0x69, 0x2a, 0xcb, 0xd2, 0xbd, 0x5a, 0xe0,
	0x7b, 0x19, 0x99, 0x1f, 0x2e, 0x7f, 0x91, 0x9d, 0xd1, 0x44, 0x1a, 0x1c, 0xec, 0xe3, 0x60, 0x24,
	0x96, 0xd1, 0xa3, 0x4a, 0xd5, 0x20, 0x17, 0xb5, 0x2b, 0x5f, 0x3c, 0x8f, 0xf1, 0xb4, 0xa9, 0x62,
	0xd7, 0xf4, 0xc4, 0xaa, 0x0e, 0x1e, 0x54, 0xe3, 0xbc, 0x06, 0x94, 0x7c, 0x86, 0x6b, 0xff, 0x3c,
	0xbb, 0xa2, 0xc7, 0x8d, 0xdc, 0x18, 0x65, 0xc1, 0xdf, 0xe3, 0x65, 0x09, 0x2e, 0xfe, 0x95, 0x8c,
	0xd1, 0xb8, 0x91, 0xba, 0xe2, 0x29, 0xbe, 0x04, 0xfb, 0xdd, 0x7f, 0x2a, 0x65, 0x9d, 0xe1, 0x07,
	0x28, 0x03, 0x2c, 0x1e, 0x3f, 0x7a, 0x41, 0xb6, 0xbd, 0x20, 0x5f, 0xbd, 0x20, 0xef, 0x83, 0x88,
	0xb6, 0x83, 0x88, 0x3e, 0x07, 0x11, 0x3d, 0xdf, 0xae, 0x35, 0xd4, 0x72, 0x95, 0x97, 0xce, 0x14,
	0x21, 0xae, 0xb1, 0xdc, 0xec, 0x62, 0x2b, 0xba, 0x62, 0x9a, 0x32, 0x6c, 0x1a, 0xe5, 0x57, 0x09,
	0x86, 0x7c, 0xf7, 0x13, 0x00, 0x00, 0xff, 0xff, 0x71, 0xb7, 0x2a, 0x01, 0x81, 0x01, 0x00, 0x00,
}

func (m *Vesting) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Vesting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Vesting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintVesting(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Paid) > 0 {
		i -= len(m.Paid)
		copy(dAtA[i:], m.Paid)
		i = encodeVarintVesting(dAtA, i, uint64(len(m.Paid)))
		i--
		dAtA[i] = 0x3a
	}
	if m.PaymentsCount != 0 {
		i = encodeVarintVesting(dAtA, i, uint64(m.PaymentsCount))
		i--
		dAtA[i] = 0x30
	}
	if m.NextDepositBlock != 0 {
		i = encodeVarintVesting(dAtA, i, uint64(m.NextDepositBlock))
		i--
		dAtA[i] = 0x28
	}
	if m.DeltaBlocks != 0 {
		i = encodeVarintVesting(dAtA, i, uint64(m.DeltaBlocks))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintVesting(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintVesting(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0x12
	}
	if m.Index != 0 {
		i = encodeVarintVesting(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintVesting(dAtA []byte, offset int, v uint64) int {
	offset -= sovVesting(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Vesting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovVesting(uint64(m.Index))
	}
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovVesting(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovVesting(uint64(l))
	}
	if m.DeltaBlocks != 0 {
		n += 1 + sovVesting(uint64(m.DeltaBlocks))
	}
	if m.NextDepositBlock != 0 {
		n += 1 + sovVesting(uint64(m.NextDepositBlock))
	}
	if m.PaymentsCount != 0 {
		n += 1 + sovVesting(uint64(m.PaymentsCount))
	}
	l = len(m.Paid)
	if l > 0 {
		n += 1 + l + sovVesting(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovVesting(uint64(l))
	}
	return n
}

func sovVesting(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozVesting(x uint64) (n int) {
	return sovVesting(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Vesting) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVesting
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vesting: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vesting: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVesting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVesting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVesting
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVesting
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVesting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVesting
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVesting
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeltaBlocks", wireType)
			}
			m.DeltaBlocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVesting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeltaBlocks |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextDepositBlock", wireType)
			}
			m.NextDepositBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVesting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextDepositBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentsCount", wireType)
			}
			m.PaymentsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVesting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PaymentsCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Paid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVesting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVesting
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVesting
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Paid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVesting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVesting
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVesting
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVesting(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVesting
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVesting(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVesting
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVesting
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVesting
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthVesting
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupVesting
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthVesting
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthVesting        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVesting          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupVesting = fmt.Errorf("proto: unexpected end of group")
)
