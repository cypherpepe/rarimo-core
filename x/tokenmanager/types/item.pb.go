// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tokenmanager/item.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Type int32

const (
	Type_NATIVE       Type = 0
	Type_ERC20        Type = 1
	Type_ERC721       Type = 2
	Type_ERC1155      Type = 3
	Type_METAPLEX_NFT Type = 4
	Type_METAPLEX_FT  Type = 5
	Type_NEAR_FT      Type = 6
	Type_NEAR_NFT     Type = 7
)

var Type_name = map[int32]string{
	0: "NATIVE",
	1: "ERC20",
	2: "ERC721",
	3: "ERC1155",
	4: "METAPLEX_NFT",
	5: "METAPLEX_FT",
	6: "NEAR_FT",
	7: "NEAR_NFT",
}

var Type_value = map[string]int32{
	"NATIVE":       0,
	"ERC20":        1,
	"ERC721":       2,
	"ERC1155":      3,
	"METAPLEX_NFT": 4,
	"METAPLEX_FT":  5,
	"NEAR_FT":      6,
	"NEAR_NFT":     7,
}

func (x Type) String() string {
	return proto.EnumName(Type_name, int32(x))
}

func (Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e83fe9c71c21d068, []int{0}
}

type ItemIndex struct {
	Collection string `protobuf:"bytes,1,opt,name=collection,proto3" json:"collection,omitempty"`
	Name       string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Symbol     string `protobuf:"bytes,3,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Uri        string `protobuf:"bytes,4,opt,name=uri,proto3" json:"uri,omitempty"`
}

func (m *ItemIndex) Reset()         { *m = ItemIndex{} }
func (m *ItemIndex) String() string { return proto.CompactTextString(m) }
func (*ItemIndex) ProtoMessage()    {}
func (*ItemIndex) Descriptor() ([]byte, []int) {
	return fileDescriptor_e83fe9c71c21d068, []int{0}
}
func (m *ItemIndex) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ItemIndex) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ItemIndex.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ItemIndex) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ItemIndex.Merge(m, src)
}
func (m *ItemIndex) XXX_Size() int {
	return m.Size()
}
func (m *ItemIndex) XXX_DiscardUnknown() {
	xxx_messageInfo_ItemIndex.DiscardUnknown(m)
}

var xxx_messageInfo_ItemIndex proto.InternalMessageInfo

func (m *ItemIndex) GetCollection() string {
	if m != nil {
		return m.Collection
	}
	return ""
}

func (m *ItemIndex) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ItemIndex) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *ItemIndex) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

type ItemMetadata struct {
	ImageUri string `protobuf:"bytes,4,opt,name=imageUri,proto3" json:"imageUri,omitempty"`
	// Hash of the token image. Encoded into hex string. (optional)
	ImageHash string `protobuf:"bytes,5,opt,name=imageHash,proto3" json:"imageHash,omitempty"`
	// Seed is used to generate PDA address for Solana
	Seed string `protobuf:"bytes,6,opt,name=seed,proto3" json:"seed,omitempty"`
}

func (m *ItemMetadata) Reset()         { *m = ItemMetadata{} }
func (m *ItemMetadata) String() string { return proto.CompactTextString(m) }
func (*ItemMetadata) ProtoMessage()    {}
func (*ItemMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_e83fe9c71c21d068, []int{1}
}
func (m *ItemMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ItemMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ItemMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ItemMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ItemMetadata.Merge(m, src)
}
func (m *ItemMetadata) XXX_Size() int {
	return m.Size()
}
func (m *ItemMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_ItemMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_ItemMetadata proto.InternalMessageInfo

func (m *ItemMetadata) GetImageUri() string {
	if m != nil {
		return m.ImageUri
	}
	return ""
}

func (m *ItemMetadata) GetImageHash() string {
	if m != nil {
		return m.ImageHash
	}
	return ""
}

func (m *ItemMetadata) GetSeed() string {
	if m != nil {
		return m.Seed
	}
	return ""
}

type ItemChainParams struct {
	Chain   string `protobuf:"bytes,1,opt,name=chain,proto3" json:"chain,omitempty"`
	TokenID string `protobuf:"bytes,2,opt,name=tokenID,proto3" json:"tokenID,omitempty"`
}

func (m *ItemChainParams) Reset()         { *m = ItemChainParams{} }
func (m *ItemChainParams) String() string { return proto.CompactTextString(m) }
func (*ItemChainParams) ProtoMessage()    {}
func (*ItemChainParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_e83fe9c71c21d068, []int{2}
}
func (m *ItemChainParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ItemChainParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ItemChainParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ItemChainParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ItemChainParams.Merge(m, src)
}
func (m *ItemChainParams) XXX_Size() int {
	return m.Size()
}
func (m *ItemChainParams) XXX_DiscardUnknown() {
	xxx_messageInfo_ItemChainParams.DiscardUnknown(m)
}

var xxx_messageInfo_ItemChainParams proto.InternalMessageInfo

func (m *ItemChainParams) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

func (m *ItemChainParams) GetTokenID() string {
	if m != nil {
		return m.TokenID
	}
	return ""
}

type Item struct {
	Index       *ItemIndex         `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	Meta        *ItemMetadata      `protobuf:"bytes,3,opt,name=meta,proto3" json:"meta,omitempty"`
	ChainParams []*ItemChainParams `protobuf:"bytes,4,rep,name=chainParams,proto3" json:"chainParams,omitempty"`
}

func (m *Item) Reset()         { *m = Item{} }
func (m *Item) String() string { return proto.CompactTextString(m) }
func (*Item) ProtoMessage()    {}
func (*Item) Descriptor() ([]byte, []int) {
	return fileDescriptor_e83fe9c71c21d068, []int{3}
}
func (m *Item) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Item) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Item.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Item) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Item.Merge(m, src)
}
func (m *Item) XXX_Size() int {
	return m.Size()
}
func (m *Item) XXX_DiscardUnknown() {
	xxx_messageInfo_Item.DiscardUnknown(m)
}

var xxx_messageInfo_Item proto.InternalMessageInfo

func (m *Item) GetIndex() *ItemIndex {
	if m != nil {
		return m.Index
	}
	return nil
}

func (m *Item) GetMeta() *ItemMetadata {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *Item) GetChainParams() []*ItemChainParams {
	if m != nil {
		return m.ChainParams
	}
	return nil
}

func init() {
	proto.RegisterEnum("rarimo.rarimocore.tokenmanager.Type", Type_name, Type_value)
	proto.RegisterType((*ItemIndex)(nil), "rarimo.rarimocore.tokenmanager.ItemIndex")
	proto.RegisterType((*ItemMetadata)(nil), "rarimo.rarimocore.tokenmanager.ItemMetadata")
	proto.RegisterType((*ItemChainParams)(nil), "rarimo.rarimocore.tokenmanager.ItemChainParams")
	proto.RegisterType((*Item)(nil), "rarimo.rarimocore.tokenmanager.Item")
}

func init() { proto.RegisterFile("tokenmanager/item.proto", fileDescriptor_e83fe9c71c21d068) }

var fileDescriptor_e83fe9c71c21d068 = []byte{
	// 452 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0x41, 0x8b, 0xd3, 0x40,
	0x14, 0x6e, 0xb6, 0x49, 0xba, 0x7d, 0x29, 0x6c, 0x78, 0x88, 0x06, 0x91, 0xb0, 0xf4, 0xb4, 0x8a,
	0x26, 0x36, 0xb2, 0x78, 0xd4, 0x5a, 0xb3, 0x58, 0xd8, 0x2d, 0xeb, 0x10, 0x45, 0x44, 0x90, 0x69,
	0x3a, 0x74, 0x07, 0x3b, 0x99, 0x92, 0x8c, 0xb0, 0xfd, 0x17, 0xfe, 0x2c, 0x8f, 0x7b, 0xf4, 0xe0,
	0x41, 0xda, 0x3f, 0x22, 0x33, 0xe9, 0x76, 0xe3, 0x45, 0x7a, 0x9a, 0xf7, 0x7d, 0xf3, 0xde, 0x37,
	0xf3, 0x7d, 0x3c, 0x78, 0xa0, 0xe4, 0x37, 0x56, 0x08, 0x5a, 0xd0, 0x39, 0x2b, 0x63, 0xae, 0x98,
	0x88, 0x96, 0xa5, 0x54, 0x12, 0xc3, 0x92, 0x96, 0x5c, 0xc8, 0xa8, 0x3e, 0x72, 0x59, 0xb2, 0xa8,
	0xd9, 0xda, 0xe7, 0xd0, 0x1d, 0x2b, 0x26, 0xc6, 0xc5, 0x8c, 0x5d, 0x63, 0x08, 0x90, 0xcb, 0xc5,
	0x82, 0xe5, 0x8a, 0xcb, 0x22, 0xb0, 0x8e, 0xad, 0x93, 0x2e, 0x69, 0x30, 0x88, 0x60, 0x17, 0x54,
	0xb0, 0xe0, 0xc0, 0xdc, 0x98, 0x1a, 0xef, 0x83, 0x5b, 0xad, 0xc4, 0x54, 0x2e, 0x82, 0xb6, 0x61,
	0xb7, 0x08, 0x7d, 0x68, 0x7f, 0x2f, 0x79, 0x60, 0x1b, 0x52, 0x97, 0xfd, 0x2f, 0xd0, 0xd3, 0x4f,
	0x5d, 0x30, 0x45, 0x67, 0x54, 0x51, 0x7c, 0x08, 0x87, 0x5c, 0xd0, 0x39, 0xfb, 0xb0, 0x6b, 0xdb,
	0x61, 0x7c, 0x04, 0x5d, 0x53, 0xbf, 0xa3, 0xd5, 0x55, 0xe0, 0x98, 0xcb, 0x3b, 0x42, 0xff, 0xa3,
	0x62, 0x6c, 0x16, 0xb8, 0xf5, 0x3f, 0x74, 0xdd, 0x1f, 0xc2, 0x91, 0x56, 0x1f, 0x5d, 0x51, 0x5e,
	0x5c, 0xd2, 0x92, 0x8a, 0x0a, 0xef, 0x81, 0x93, 0x6b, 0xb8, 0x75, 0x52, 0x03, 0x0c, 0xa0, 0x63,
	0x12, 0x18, 0xbf, 0xdd, 0xfa, 0xb8, 0x85, 0xfd, 0xdf, 0x16, 0xd8, 0x5a, 0x03, 0x5f, 0x81, 0xc3,
	0x75, 0x20, 0x66, 0xd0, 0x4b, 0x1e, 0x47, 0xff, 0x0f, 0x31, 0xda, 0x25, 0x48, 0xea, 0x39, 0x7c,
	0x0d, 0xb6, 0x60, 0x8a, 0x9a, 0x48, 0xbc, 0xe4, 0xe9, 0x3e, 0xf3, 0xb7, 0xb1, 0x10, 0x33, 0x89,
	0xef, 0xc1, 0xcb, 0xef, 0xac, 0x04, 0xf6, 0x71, 0xfb, 0xc4, 0x4b, 0xe2, 0x7d, 0x84, 0x1a, 0x09,
	0x90, 0xa6, 0xc6, 0x13, 0x05, 0x76, 0xb6, 0x5a, 0x32, 0x04, 0x70, 0x27, 0xc3, 0x6c, 0xfc, 0x31,
	0xf5, 0x5b, 0xd8, 0x05, 0x27, 0x25, 0xa3, 0xe4, 0xb9, 0x6f, 0x69, 0x3a, 0x25, 0xa3, 0x97, 0xc9,
	0xc0, 0x3f, 0x40, 0x0f, 0x3a, 0x29, 0x19, 0x0d, 0x06, 0xa7, 0xa7, 0x7e, 0x1b, 0x7d, 0xe8, 0x5d,
	0xa4, 0xd9, 0xf0, 0xf2, 0x3c, 0xfd, 0xf4, 0x75, 0x72, 0x96, 0xf9, 0x36, 0x1e, 0x81, 0xb7, 0x63,
	0xce, 0x32, 0xdf, 0xd1, 0xfd, 0x93, 0x74, 0x48, 0x34, 0x70, 0xb1, 0x07, 0x87, 0x06, 0xe8, 0xde,
	0xce, 0x9b, 0xf3, 0x9f, 0xeb, 0xd0, 0xba, 0x59, 0x87, 0xd6, 0x9f, 0x75, 0x68, 0xfd, 0xd8, 0x84,
	0xad, 0x9b, 0x4d, 0xd8, 0xfa, 0xb5, 0x09, 0x5b, 0x9f, 0x93, 0x39, 0x57, 0x0b, 0x3a, 0x8d, 0x72,
	0x29, 0xe2, 0xda, 0xd0, 0xf6, 0x78, 0xa6, 0x8d, 0xc5, 0xd7, 0xf1, 0x3f, 0x3b, 0xad, 0x56, 0x4b,
	0x56, 0x4d, 0x5d, 0xb3, 0xd5, 0x2f, 0xfe, 0x06, 0x00, 0x00, 0xff, 0xff, 0xdb, 0xd3, 0xe2, 0x30,
	0xf0, 0x02, 0x00, 0x00,
}

func (m *ItemIndex) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ItemIndex) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ItemIndex) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Uri) > 0 {
		i -= len(m.Uri)
		copy(dAtA[i:], m.Uri)
		i = encodeVarintItem(dAtA, i, uint64(len(m.Uri)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintItem(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintItem(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Collection) > 0 {
		i -= len(m.Collection)
		copy(dAtA[i:], m.Collection)
		i = encodeVarintItem(dAtA, i, uint64(len(m.Collection)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ItemMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ItemMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ItemMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Seed) > 0 {
		i -= len(m.Seed)
		copy(dAtA[i:], m.Seed)
		i = encodeVarintItem(dAtA, i, uint64(len(m.Seed)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ImageHash) > 0 {
		i -= len(m.ImageHash)
		copy(dAtA[i:], m.ImageHash)
		i = encodeVarintItem(dAtA, i, uint64(len(m.ImageHash)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ImageUri) > 0 {
		i -= len(m.ImageUri)
		copy(dAtA[i:], m.ImageUri)
		i = encodeVarintItem(dAtA, i, uint64(len(m.ImageUri)))
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}

func (m *ItemChainParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ItemChainParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ItemChainParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TokenID) > 0 {
		i -= len(m.TokenID)
		copy(dAtA[i:], m.TokenID)
		i = encodeVarintItem(dAtA, i, uint64(len(m.TokenID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintItem(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Item) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Item) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Item) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainParams) > 0 {
		for iNdEx := len(m.ChainParams) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ChainParams[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintItem(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Meta != nil {
		{
			size, err := m.Meta.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintItem(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Index != nil {
		{
			size, err := m.Index.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintItem(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintItem(dAtA []byte, offset int, v uint64) int {
	offset -= sovItem(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ItemIndex) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Collection)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	l = len(m.Uri)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	return n
}

func (m *ItemMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ImageUri)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	l = len(m.ImageHash)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	l = len(m.Seed)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	return n
}

func (m *ItemChainParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	l = len(m.TokenID)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	return n
}

func (m *Item) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Index != nil {
		l = m.Index.Size()
		n += 1 + l + sovItem(uint64(l))
	}
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovItem(uint64(l))
	}
	if len(m.ChainParams) > 0 {
		for _, e := range m.ChainParams {
			l = e.Size()
			n += 1 + l + sovItem(uint64(l))
		}
	}
	return n
}

func sovItem(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozItem(x uint64) (n int) {
	return sovItem(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ItemIndex) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowItem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ItemIndex: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ItemIndex: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collection", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Collection = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipItem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthItem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ItemMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowItem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ItemMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ItemMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Seed = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipItem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthItem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ItemChainParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowItem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ItemChainParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ItemChainParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipItem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthItem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Item) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowItem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Item: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Item: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Index == nil {
				m.Index = &ItemIndex{}
			}
			if err := m.Index.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &ItemMetadata{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainParams = append(m.ChainParams, &ItemChainParams{})
			if err := m.ChainParams[len(m.ChainParams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipItem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthItem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipItem(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowItem
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowItem
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowItem
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthItem
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupItem
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthItem
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthItem        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowItem          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupItem = fmt.Errorf("proto: unexpected end of group")
)
