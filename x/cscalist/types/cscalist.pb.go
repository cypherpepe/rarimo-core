// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cscalist/cscalist.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Params struct {
	// Linear congruential generator params
	// https://en.wikipedia.org/wiki/Linear_congruential_generator
	LcgA     uint64 `protobuf:"varint,1,opt,name=lcgA,proto3" json:"lcgA,omitempty"`
	LcgB     uint64 `protobuf:"varint,2,opt,name=lcgB,proto3" json:"lcgB,omitempty"`
	LcgMod   uint64 `protobuf:"varint,3,opt,name=lcgMod,proto3" json:"lcgMod,omitempty"`
	LcgValue uint64 `protobuf:"varint,4,opt,name=lcgValue,proto3" json:"lcgValue,omitempty"`
	// RootKey is the key of the current root node
	RootKey string `protobuf:"bytes,5,opt,name=rootKey,proto3" json:"rootKey,omitempty"`
	// RootUpdated is true when the root node was updated in Rarimo, but not in Chain
	RootUpdated bool `protobuf:"varint,6,opt,name=rootUpdated,proto3" json:"rootUpdated,omitempty"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_6f732db15fd3859c, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetLcgA() uint64 {
	if m != nil {
		return m.LcgA
	}
	return 0
}

func (m *Params) GetLcgB() uint64 {
	if m != nil {
		return m.LcgB
	}
	return 0
}

func (m *Params) GetLcgMod() uint64 {
	if m != nil {
		return m.LcgMod
	}
	return 0
}

func (m *Params) GetLcgValue() uint64 {
	if m != nil {
		return m.LcgValue
	}
	return 0
}

func (m *Params) GetRootKey() string {
	if m != nil {
		return m.RootKey
	}
	return ""
}

func (m *Params) GetRootUpdated() bool {
	if m != nil {
		return m.RootUpdated
	}
	return false
}

type Node struct {
	// Node self key
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Node priority (should be random)
	Priority uint64 `protobuf:"varint,2,opt,name=priority,proto3" json:"priority,omitempty"`
	// Node left son key
	Left string `protobuf:"bytes,4,opt,name=left,proto3" json:"left,omitempty"`
	// Node right son key
	Right string `protobuf:"bytes,5,opt,name=right,proto3" json:"right,omitempty"`
	// Merkle hash. H = Hash(Hash(left_key|right_key)|self_key)
	Hash string `protobuf:"bytes,6,opt,name=hash,proto3" json:"hash,omitempty"`
	// Hash(left_key|right_key)
	ChildrenHash string `protobuf:"bytes,7,opt,name=childrenHash,proto3" json:"childrenHash,omitempty"`
}

func (m *Node) Reset()         { *m = Node{} }
func (m *Node) String() string { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()    {}
func (*Node) Descriptor() ([]byte, []int) {
	return fileDescriptor_6f732db15fd3859c, []int{1}
}
func (m *Node) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Node) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Node.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Node) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Node.Merge(m, src)
}
func (m *Node) XXX_Size() int {
	return m.Size()
}
func (m *Node) XXX_DiscardUnknown() {
	xxx_messageInfo_Node.DiscardUnknown(m)
}

var xxx_messageInfo_Node proto.InternalMessageInfo

func (m *Node) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Node) GetPriority() uint64 {
	if m != nil {
		return m.Priority
	}
	return 0
}

func (m *Node) GetLeft() string {
	if m != nil {
		return m.Left
	}
	return ""
}

func (m *Node) GetRight() string {
	if m != nil {
		return m.Right
	}
	return ""
}

func (m *Node) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *Node) GetChildrenHash() string {
	if m != nil {
		return m.ChildrenHash
	}
	return ""
}

func init() {
	proto.RegisterType((*Params)(nil), "rarimo.rarimocore.cscalist.Params")
	proto.RegisterType((*Node)(nil), "rarimo.rarimocore.cscalist.Node")
}

func init() { proto.RegisterFile("cscalist/cscalist.proto", fileDescriptor_6f732db15fd3859c) }

var fileDescriptor_6f732db15fd3859c = []byte{
	// 325 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x91, 0xb1, 0x4e, 0xf3, 0x30,
	0x14, 0x85, 0xeb, 0xbf, 0x69, 0xda, 0xf8, 0x67, 0x40, 0x56, 0x05, 0x56, 0x87, 0x28, 0xea, 0xd4,
	0x85, 0x64, 0xe0, 0x09, 0xe8, 0x54, 0x09, 0x81, 0x50, 0x24, 0x18, 0xd8, 0x5c, 0xc7, 0x38, 0x16,
	0x2e, 0x8e, 0x1c, 0x57, 0x22, 0x6f, 0xc1, 0xc4, 0xcc, 0xe3, 0x30, 0x76, 0x64, 0x44, 0xed, 0x8b,
	0x20, 0xdf, 0xa4, 0x11, 0x4c, 0xfe, 0xce, 0xb9, 0xd7, 0xba, 0x47, 0x3a, 0xf8, 0x9c, 0xd7, 0x9c,
	0x69, 0x55, 0xbb, 0xec, 0x08, 0x69, 0x65, 0x8d, 0x33, 0x64, 0x66, 0x99, 0x55, 0x1b, 0x93, 0xb6,
	0x0f, 0x37, 0x56, 0xa4, 0xc7, 0x8d, 0xd9, 0x54, 0x1a, 0x69, 0x60, 0x2d, 0xf3, 0xd4, 0xfe, 0x98,
	0x7f, 0x20, 0x1c, 0xde, 0x31, 0xcb, 0x36, 0x35, 0x21, 0x38, 0xd0, 0x5c, 0x5e, 0x51, 0x94, 0xa0,
	0x45, 0x90, 0x03, 0x77, 0xde, 0x92, 0xfe, 0xeb, 0xbd, 0x25, 0x39, 0xc3, 0xa1, 0xe6, 0xf2, 0xc6,
	0x14, 0x74, 0x08, 0x6e, 0xa7, 0xc8, 0x0c, 0x4f, 0x34, 0x97, 0x0f, 0x4c, 0x6f, 0x05, 0x0d, 0x60,
	0xd2, 0x6b, 0x42, 0xf1, 0xd8, 0x1a, 0xe3, 0xae, 0x45, 0x43, 0x47, 0x09, 0x5a, 0x44, 0xf9, 0x51,
	0x92, 0x04, 0xff, 0xf7, 0x78, 0x5f, 0x15, 0xcc, 0x89, 0x82, 0x86, 0x09, 0x5a, 0x4c, 0xf2, 0xdf,
	0xd6, 0xfc, 0x1d, 0xe1, 0xe0, 0xd6, 0x14, 0x82, 0x9c, 0xe2, 0xe1, 0xb3, 0x68, 0x20, 0x5f, 0x94,
	0x7b, 0xf4, 0x27, 0x2b, 0xab, 0x8c, 0x55, 0xae, 0xe9, 0x22, 0xf6, 0x1a, 0xa2, 0x8b, 0x27, 0x07,
	0x51, 0xa2, 0x1c, 0x98, 0x4c, 0xf1, 0xc8, 0x2a, 0x59, 0xba, 0x2e, 0x44, 0x2b, 0xfc, 0x66, 0xc9,
	0xea, 0x12, 0x6e, 0x47, 0x39, 0x30, 0x99, 0xe3, 0x13, 0x5e, 0x2a, 0x5d, 0x58, 0xf1, 0xb2, 0xf2,
	0xb3, 0x31, 0xcc, 0xfe, 0x78, 0xcb, 0xd5, 0xe7, 0x3e, 0x46, 0xbb, 0x7d, 0x8c, 0xbe, 0xf7, 0x31,
	0x7a, 0x3b, 0xc4, 0x83, 0xdd, 0x21, 0x1e, 0x7c, 0x1d, 0xe2, 0xc1, 0x63, 0x2a, 0x95, 0x2b, 0xb7,
	0xeb, 0x94, 0x9b, 0x4d, 0xd6, 0x76, 0xd1, 0x3d, 0x17, 0xbe, 0x93, 0xec, 0xb5, 0xef, 0x2d, 0x73,
	0x4d, 0x25, 0xea, 0x75, 0x08, 0x65, 0x5c, 0xfe, 0x04, 0x00, 0x00, 0xff, 0xff, 0x0c, 0xc6, 0x37,
	0xbf, 0xd9, 0x01, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RootUpdated {
		i--
		if m.RootUpdated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if len(m.RootKey) > 0 {
		i -= len(m.RootKey)
		copy(dAtA[i:], m.RootKey)
		i = encodeVarintCscalist(dAtA, i, uint64(len(m.RootKey)))
		i--
		dAtA[i] = 0x2a
	}
	if m.LcgValue != 0 {
		i = encodeVarintCscalist(dAtA, i, uint64(m.LcgValue))
		i--
		dAtA[i] = 0x20
	}
	if m.LcgMod != 0 {
		i = encodeVarintCscalist(dAtA, i, uint64(m.LcgMod))
		i--
		dAtA[i] = 0x18
	}
	if m.LcgB != 0 {
		i = encodeVarintCscalist(dAtA, i, uint64(m.LcgB))
		i--
		dAtA[i] = 0x10
	}
	if m.LcgA != 0 {
		i = encodeVarintCscalist(dAtA, i, uint64(m.LcgA))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Node) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Node) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Node) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChildrenHash) > 0 {
		i -= len(m.ChildrenHash)
		copy(dAtA[i:], m.ChildrenHash)
		i = encodeVarintCscalist(dAtA, i, uint64(len(m.ChildrenHash)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintCscalist(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Right) > 0 {
		i -= len(m.Right)
		copy(dAtA[i:], m.Right)
		i = encodeVarintCscalist(dAtA, i, uint64(len(m.Right)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Left) > 0 {
		i -= len(m.Left)
		copy(dAtA[i:], m.Left)
		i = encodeVarintCscalist(dAtA, i, uint64(len(m.Left)))
		i--
		dAtA[i] = 0x22
	}
	if m.Priority != 0 {
		i = encodeVarintCscalist(dAtA, i, uint64(m.Priority))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintCscalist(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCscalist(dAtA []byte, offset int, v uint64) int {
	offset -= sovCscalist(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LcgA != 0 {
		n += 1 + sovCscalist(uint64(m.LcgA))
	}
	if m.LcgB != 0 {
		n += 1 + sovCscalist(uint64(m.LcgB))
	}
	if m.LcgMod != 0 {
		n += 1 + sovCscalist(uint64(m.LcgMod))
	}
	if m.LcgValue != 0 {
		n += 1 + sovCscalist(uint64(m.LcgValue))
	}
	l = len(m.RootKey)
	if l > 0 {
		n += 1 + l + sovCscalist(uint64(l))
	}
	if m.RootUpdated {
		n += 2
	}
	return n
}

func (m *Node) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovCscalist(uint64(l))
	}
	if m.Priority != 0 {
		n += 1 + sovCscalist(uint64(m.Priority))
	}
	l = len(m.Left)
	if l > 0 {
		n += 1 + l + sovCscalist(uint64(l))
	}
	l = len(m.Right)
	if l > 0 {
		n += 1 + l + sovCscalist(uint64(l))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovCscalist(uint64(l))
	}
	l = len(m.ChildrenHash)
	if l > 0 {
		n += 1 + l + sovCscalist(uint64(l))
	}
	return n
}

func sovCscalist(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCscalist(x uint64) (n int) {
	return sovCscalist(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCscalist
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LcgA", wireType)
			}
			m.LcgA = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCscalist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LcgA |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LcgB", wireType)
			}
			m.LcgB = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCscalist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LcgB |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LcgMod", wireType)
			}
			m.LcgMod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCscalist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LcgMod |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LcgValue", wireType)
			}
			m.LcgValue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCscalist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LcgValue |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RootKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCscalist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCscalist
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCscalist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RootKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RootUpdated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCscalist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RootUpdated = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCscalist(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCscalist
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Node) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCscalist
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Node: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Node: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCscalist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCscalist
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCscalist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Priority", wireType)
			}
			m.Priority = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCscalist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Priority |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Left", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCscalist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCscalist
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCscalist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Left = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Right", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCscalist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCscalist
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCscalist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Right = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCscalist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCscalist
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCscalist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChildrenHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCscalist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCscalist
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCscalist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChildrenHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCscalist(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCscalist
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCscalist(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCscalist
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCscalist
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCscalist
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCscalist
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCscalist
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCscalist
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCscalist        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCscalist          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCscalist = fmt.Errorf("proto: unexpected end of group")
)
